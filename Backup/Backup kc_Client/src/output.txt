import React from "react";
import "./App.css";
import "primereact/resources/themes/md-light-indigo/theme.css";
import "primereact/resources/primereact.min.css";
import "primeicons/primeicons.css";
import "../node_modules/primeflex/primeflex.css";
import Navigation from "./components/Nav";
import { BrowserRouter as Router, Routes, Route } from "react-router-dom";
import Login from "./components/Login";
import StartMenue from "./components/StartMenue";
import Vereine from "./components/Vereine/Vereine";
import Personen from "./components/Mitglieder/Personen";
import Veranstaltungen from "./components/Veranstaltungen";
import Teilnehmer from "./components/Teilnehmer";
import Kosten from "./components/Kosten";
import Reisekosten from "./components/Reisekosten";
import Teilnehmerliste from "./components/Teilnehmerliste";
import Erhebungsbogen from "./components/Erhebungsbogen";
import Anmeldung from "./components/Anmeldung";
import Abrechnung from "./components/Abrechnung";
import AusgabeReisekosten from "./components/AusgabeReisekosten";

const App = () => {
  return (
    <div className="App">
      <Navigation />
      <Router>
        <Routes>
          <Route
            path="/login"
            element={<Login />}
          />
          <Route
            path="/startmenue"
            element={<StartMenue />}
          />
          <Route
            path="/"
            element={null}
          />
          <Route
            path="/vereine"
            element={<Vereine />}
          />
          <Route
            path="/personen"
            element={<Personen />}
          />
          <Route
            path="/veranstaltungen"
            element={<Veranstaltungen />}
          />
          <Route
            path="/teilnehmer"
            element={<Teilnehmer />}
          />
          <Route
            path="/kosten"
            element={<Kosten />}
          />
          <Route
            path="/reisekosten"
            element={<Reisekosten />}
          />
          <Route
            path="/teilnehmerliste"
            element={<Teilnehmerliste />}
          />
          <Route
            path="/erhebungsbogen"
            element={<Erhebungsbogen />}
          />
          <Route
            path="/anmeldung"
            element={<Anmeldung />}
          />
          <Route
            path="/abrechnung"
            element={<Abrechnung />}
          />
          <Route
            path="/ausgabeReisekosten"
            element={<AusgabeReisekosten />}
          />
          <Route path="*" element={<p>Path not resolved</p>} />
        </Routes>
      </Router>
    </div>
  );
};

export default App;
import React, { useCallback } from "react";
import { Button } from "primereact/button";

const StartMenue = () => {
  const callVereine = useCallback(function () {
    window.location.href = "/vereine";
  }, []);

  const callMitglieder = useCallback(function () {
    window.location.href = "/personen";
  }, []);

  const callVeranstaltungen = useCallback(function () {
    window.location.href = "/veranstaltungen";
  }, []);

  const callTeilnehmer = useCallback(function () {
    window.location.href = "/teilnehmer";
  }, []);

  const callKosten = useCallback(function () {
    window.location.href = "/kosten";
  }, []);

  const callReisekosten = useCallback(function () {
    window.location.href = "/reisekosten";
  }, []);

  const callTeilnehmerliste = useCallback(function () {
    window.location.href = "/teilnehmerliste";
  }, []);

  const callErhebungsbogen = useCallback(function () {
    window.location.href = "/erhebungsbogen";
  }, []);

  const callAnmeldung = useCallback(function () {
    window.location.href = "/anmeldung";
  }, []);

  const callAbrechnung = useCallback(function () {
    window.location.href = "/abrechnung";
  }, []);

  const callAusgabeReisekosten = useCallback(function () {
    window.location.href = "/ausgabeReisekosten";
  }, []);

  return (
    <div>
      <h1>KanuControl</h1>
      <h4>aktive Veranstaltung</h4>
      <p>Test-Veranstaltung</p>
      <div className="grid border-solid m-auto w-11">
        <div className="col">
          <div className="p-3">
            <div className="block bg-blue-700 text-white font-bold text-center p-3 border-round mb-3">
              <Button
                label="Vereine"
                className="w-full bg-blue-700 hover:text-yellow-500"
                onClick={callVereine}></Button>
            </div>
            <div className="block bg-blue-700 text-white font-bold text-center p-3 border-round mb-3">
              <Button
                label="Mitglieder"
                className="w-full bg-blue-700 hover:text-yellow-500"
                onClick={callMitglieder}></Button>
            </div>
          </div>
        </div>
        <div className="col">
          <div className="p-3">
            <div className="block bg-blue-700 text-white font-bold text-center p-3 border-round mb-3">
              <Button
                label="Veranstaltungen"
                className="w-full bg-blue-700 hover:text-yellow-500"
                onClick={callVeranstaltungen}></Button>
            </div>
            <div className="block bg-blue-700 text-white font-bold text-center p-3 border-round mb-3">
              <Button
                label="Teilnehmer"
                className="w-full bg-blue-700 hover:text-yellow-500"
                onClick={callTeilnehmer}></Button>
            </div>
          </div>
        </div>
        <div className="col">
          <div className="p-3">
            <div className="block bg-blue-700 text-white font-bold text-center p-3 border-round mb-3">
              <Button
                label="Kosten"
                className="w-full bg-blue-700 hover:text-yellow-500"
                onClick={callKosten}></Button>
            </div>
            <div className="block bg-blue-700 text-white font-bold text-center p-3 border-round mb-3">
              <Button
                label="Reisekosten"
                className="w-full bg-blue-700 hover:text-yellow-500"
                onClick={callReisekosten}></Button>
            </div>
          </div>
        </div>
      </div>
      <p></p>

      {/* Ab hier kommt das Menue zur Abrechnung */}

      <div className="grid border-solid m-auto w-11">
        <div className="col">
          <div className="p-3">
            <div className="block bg-yellow-500 font-bold text-center p-3 border-round mb-3">
              <Button
                label="Teilnehmerliste"
                className="w-full text-900 hover:text-pink-500 bg-yellow-500"
                onClick={callTeilnehmerliste}></Button>
            </div>
            <div className="block bg-yellow-500 font-bold text-center p-3 border-round mb-3">
              <Button
                label="Erhebungsbogen"
                className="w-full text-900 hover:text-pink-500 bg-yellow-500"
                onClick={callErhebungsbogen}></Button>
            </div>
          </div>
        </div>
        <div className="col">
          <div className="p-3">
            <div className="block bg-red-700 text-white font-bold text-center p-3 border-round mb-3">
              <Button
                label="Deckblatt Anmeldung"
                className="w-full text-50 hover:text-yellow-500 bg-red-700"
                onClick={callAnmeldung}></Button>
            </div>
            <div className="block bg-yellow-500 font-bold text-center p-3 border-round mb-3">
              <Button
                label="Deckblatt Abrechnung"
                className="w-full text-900 hover:text-pink-500 bg-yellow-500"
                onClick={callAbrechnung}></Button>
            </div>
          </div>
        </div>
        <div className="col">
          <div className="p-3">
            <div className="block bg-yellow-500 font-bold text-center p-3 border-round mb-3">
              <Button
                label="Ausgabe Reisekosten"
                className="w-full text-900 hover:text-pink-500 bg-yellow-500"
                onClick={callAusgabeReisekosten}></Button>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default StartMenue;
import React from "react";
import { InputText } from "primereact/inputtext";
import { Menubar } from "primereact/menubar";

const Navigation = () => {
  const navlist = [
    {
      label: "Home",
      icon: "pi pi-fw pi-home",
      command: () => {
        window.location.href = "/startmenue";
      },
    },
    {
      label: "Anmelden",
      icon: "pi pi-sign-in",
      command: () => {
        window.location.href = "/login";
      },
    },
  ];

  const start = (
    <img
      src="https://i.ibb.co/wM20B9N/logo-Kanu-Control200px.png"
      alt="KanuControl"
      width="30"></img>
  );
  const end = (
    <InputText
      placeholder="Search"
      type="text"
    />
  );

  return (
    <div>
      <header>
        <nav>
          <ul>
            <Menubar
              model={navlist}
              start={start}
              end={end}
            />
          </ul>
        </nav>
      </header>
    </div>
  );
};

export default React.memo(Navigation);
import React, { memo } from "react";
import PropTypes from "prop-types";

interface MenueHeaderProps {
  headerText?: string;
}

const MenueHeaderComponent: React.FC<MenueHeaderProps> = ({ headerText }) => {
  return (
    <header>
      <h2>{headerText}</h2>
    </header>
  );
};

MenueHeaderComponent.propTypes = {
  headerText: PropTypes.string,
};

export const MenueHeader = memo(MenueHeaderComponent);
import React, { useState } from "react";
import { InputText } from "primereact/inputtext";
import { Checkbox } from "primereact/checkbox";
import { Button } from "primereact/button";

const Login = () => {
  const [checked, setChecked] = useState(false); // Initialize with a boolean value

  function callStartMenue() {
    window.location.href = "/startmenue";
  }

  return (
    <div className="flex align-items-center justify-content-center">
      <div className="surface-card p-4 shadow-2 border-round w-full lg:w-6">
        <div className="text-center">
          <img
            src="https://i.ibb.co/wM20B9N/logo-Kanu-Control200px.png"
            alt="KanuControl"
            width="60"
          />
          <div className="text-900 text-3xl font-medium mb-3">KanuControl</div>
          <span className="text-600 font-medium line-height-3">
            Noch nicht registriert?
          </span>
          <a
            href="##"
            className="font-medium no-underline ml-2 text-blue-500 cursor-pointer">
            Hier registrieren!
          </a>
        </div>

        <div>
          <label
            htmlFor="Email"
            className="block text-900 font-medium mb-2">
            Email
          </label>
          <InputText
            id="email"
            type="text"
            className="w-full mb-3"
          />

          <label
            htmlFor="password"
            className="block text-900 font-medium mb-2">
            Passwort
          </label>
          <InputText
            id="password"
            type="password"
            className="w-full mb-3"
          />

          <div className="flex align-items-center justify-content-between mb-6">
            <div className="flex align-items-center">
              <Checkbox
                id="rememberme"
                onChange={(e) => setChecked(e.checked)}
                checked={checked}
                className="mr-2"
              />
              <label htmlFor="rememberme">Anmeldung speichern?</label>
            </div>
            <a
              href="##"
              className="font-medium no-underline ml-2 text-blue-500 text-right cursor-pointer">
              Passwort vergessen?
            </a>
          </div>

          <Button
            label="Anmelden"
            icon="pi pi-user"
            className="w-full bg-blue-700"
            onClick={callStartMenue}></Button>
        </div>
      </div>
    </div>
  );
};

export default Login;
import React from "react";

const Teilnehmer = () => {
    return (

        <div className="border-solid m-auto w-11">
            <h1>Teilnehmer</h1>
        </div>



    )
}

export default Teilnehmer;import React from "react";

const Kosten = () => {
    return (

        <div className="border-solid m-auto w-11">
            <h1>Kosten</h1>
        </div>

    )
}

export default Kosten;import React from "react";

const Anmeldung = () => {
    return (

        <div className="border-solid m-auto w-11">
            <h1>Anmeldung</h1>
        </div>



    )
}

export default Anmeldung;import React, { useState, useRef, useCallback, useEffect } from "react";
import { Toast } from "primereact/toast";
import { BtnStoreCancel } from "../../services/BtnStoreCancel";
import { FormFeld } from "../../services/FormFeld";
import { Person } from "../interfaces/Person"; // Import the Person interface

interface PersonEditFormProps {
  onSpeichern: (person: Person) => void;
  onAbbruch: () => void;
  person?: Person; // Use the Person interface here
}

export function PersonEditForm({
  onSpeichern,
  onAbbruch,
  person,
}: PersonEditFormProps) {
  const [name, setPersonName] = useState("");
  const [vorname, setPersonVorname] = useState("");
  const [strasse, setPersonStrasse] = useState("");
  const [plz, setPersonPLZ] = useState("");
  const [ort, setPersonOrt] = useState("");
  const [telefon, setPersonTelefon] = useState("");
  const [bankName, setPersonBankName] = useState("");
  const [iban, setPersonIBAN] = useState("");
  const [bic, setPersonBIC] = useState("");
  const toast = useRef<Toast | null>(null);

  const createUpdatePerson = useCallback(() => {
    if (person) {
      const updatedPerson: Person = {
        id: person.id, // Include the id
        name,
        vorname,
        strasse,
        plz,
        ort,
        telefon,
        bankName,
        iban,
        bic,
      };
      onSpeichern(updatedPerson);
    }
  }, [
    name,
    vorname,
    strasse,
    plz,
    ort,
    telefon,
    bankName,
    iban,
    bic,
    onSpeichern,
    person,
  ]);

  useEffect(() => {
    if (person) {
      setPersonName(person.name);
      setPersonVorname(person.vorname);
      setPersonStrasse(person.strasse);
      setPersonPLZ(person.plz);
      setPersonOrt(person.ort);
      setPersonTelefon(person.telefon);
      setPersonBankName(person.bankName);
      setPersonIBAN(person.iban);
      setPersonBIC(person.bic);
    }
  }, [person]);

  const handleCreateUpdatePerson = () => {
    createUpdatePerson();
    return false; // Placeholder value indicating that the update was not successful
  };

  return (
    <>
      <Toast ref={toast} />
      <div className="grid m-auto w-11">
        {FormFeld(name, "Name", false, setPersonName)}
        {FormFeld(vorname, "Vorname", false, setPersonVorname)}
        {FormFeld(strasse, "Strasse", false, setPersonStrasse)}
        {FormFeld(plz, "PLZ", false, setPersonPLZ)}
        {FormFeld(ort, "Ort", false, setPersonOrt)}
        {FormFeld(telefon, "Telefon", false, setPersonTelefon)}
        {FormFeld(bankName, "Bank", false, setPersonBankName)}
        {FormFeld(iban, "IBAN", false, setPersonIBAN)}
        {FormFeld(bic, "BIC", false, setPersonBIC)}
      </div>
      <BtnStoreCancel
        createUpdate={handleCreateUpdatePerson}
        onAbbruch={onAbbruch}
      />
    </>
  );
}
import React, { ReactNode } from "react";
import { BtnEditDeleteBack } from "../../services/BtnEditDeleteBack";
import { Button } from "primereact/button";
import { ConfirmDialog } from "primereact/confirmdialog";
import { Person } from "../interfaces/Person"; // Import the Person interface

interface ButtonNeuePersonProps {
  onNeuePerson: () => void;
  btnNeuePerson: boolean;
  visible: boolean;
  setVisible: React.Dispatch<React.SetStateAction<boolean>>;
  selectedPerson: Person | null; // Use the Person interface here
  accept: () => void;
  reject: () => void;
  onÄndernPerson: () => void;
  btnÄndernPerson: boolean;
  btnLöschenPerson: boolean;
  onStartMenue: () => void;
}

export function buttonNeuePerson({
  onNeuePerson,
  btnNeuePerson,
  visible,
  setVisible,
  selectedPerson,
  accept,
  reject,
  onÄndernPerson,
  btnÄndernPerson,
  btnLöschenPerson,
  onStartMenue,
}: ButtonNeuePersonProps): ReactNode {
  return (
    <div>
      <Button
        label="Neue Person" // Update the label
        className="p-button-outlined m-2"
        onClick={onNeuePerson}
        disabled={btnNeuePerson}
      />
      <ConfirmDialog
        visible={visible}
        onHide={() => setVisible(false)}
        message={
          selectedPerson
            ? "Soll die Person " + selectedPerson.name + " gelöscht werden?" // Update the message
            : ""
        }
        header={
          selectedPerson ? "Löschen der Person " + selectedPerson.name + "?" : "" // Update the header
        }
        icon="pi pi-exclamation-triangle"
        accept={accept}
        reject={reject}
      />
      <BtnEditDeleteBack
        onÄndern={onÄndernPerson}
        btnÄndern={btnÄndernPerson}
        setVisible={setVisible}
        btnLöschen={btnLöschenPerson}
        onStartMenue={onStartMenue}
      />
    </div>
  );
}
import React, { Component } from "react";
import { MenueHeader } from "../MenueHeader";
import { PersonTable } from "./PersonTable";
import { PersonFormView } from "./PersonFormView";
import { PersonEditForm } from "./PersonEditForm";
import { Person } from "../interfaces/Person"; 
import { renderLoadingOrError } from "../../services/loadingOnErrorUtils";
import { navigateToStartMenu } from "../../services/navigateToStartMenue";

import {
  getAllPersonen as dbGetAllPersonen,
  deletePerson as dbDeletePerson,
  createPerson as dbCreatePerson,
  replacePerson as dbReplacePerson,
} from "../../services/personen";

interface PersonenProps {}

interface PersonenState {
  data: Person[];
  selectedPerson: Person | null;
  loading: boolean;
  error: null | string;
  personFormEditMode: boolean;
  modusNeuePerson: boolean;
  btnLöschenIsDisabled: boolean;
  btnÄndernIsDisabled: boolean;
  btnNeuePersonIsDisabled: boolean;
}

class Personen extends Component<PersonenProps, PersonenState> {
  state: PersonenState = {
    data: [],
    selectedPerson: null,
    loading: true,
    error: null,
    personFormEditMode: false,
    modusNeuePerson: true,
    btnLöschenIsDisabled: true,
    btnÄndernIsDisabled: true,
    btnNeuePersonIsDisabled: false,
  };

  btnNeuePersonIsDisabled: boolean = false;
  btnÄndernIsDisabled: boolean = false;
  btnLöschenIsDisabled: boolean = false;

  componentDidMount() {
    this.fetchPersonenData();
  }

  fetchPersonenData = async () => {
    try {
      const personen = await dbGetAllPersonen(); 
      this.setState({
        data: personen,
        loading: false,
        error: null,
      });
    } catch (error) {
      this.setState({
        data: [],
        loading: false,
        error: "An error occurred while fetching data.",
      });
    }
  };
  btnSpeichern = async (person: Person) => {
    this.setState({
      btnLöschenIsDisabled: true,
      btnÄndernIsDisabled: true,
    });

    const { modusNeuePerson, selectedPerson } = this.state;

    try {
      // Perform validation check here
      if (
        (modusNeuePerson &&
          person.name.trim() !== "" &&
          person.vorname.trim() !== "") ||
        (!modusNeuePerson && selectedPerson)
      ) {
        if (modusNeuePerson) {
          await dbCreatePerson(person);
        } else {
          if (selectedPerson) {
            person.id = selectedPerson.id;
            await dbReplacePerson(person);
          } else {
            throw new Error("No selected Person found.");
          }
        }

        this.fetchPersonenData();

        if (!modusNeuePerson && selectedPerson) {
          this.setState({
            selectedPerson: {
              ...selectedPerson,
              ...person,
            },
          });
        }

        this.setState({
          personFormEditMode: false,
        });
      } else {
        // message: speichern einer leeren Person ist nicht zulässig
      }
    } catch (error) {
      console.error("Error saving person:", error);
    }
  };

  btnAbbruch = () => {
    this.setState({
      btnLöschenIsDisabled: true,
      personFormEditMode: false,
      selectedPerson: null,
    });
  };

  btnNeuePerson = () => {
    // Create a new empty person
    const newPerson = {
      name: "",
      vorname: "",
      strasse: "",
      plz: "",
      ort: "",
      telefon: "",
      bankName: "",
      iban: "",
      bic: "",
    };

    this.setState({
      modusNeuePerson: true,
      btnLöschenIsDisabled: true,
      btnÄndernIsDisabled: true,
      btnNeuePersonIsDisabled: false,
      personFormEditMode: true,
      selectedPerson: newPerson,
    });
  };

  editPerson = () => {
    this.setState({
      personFormEditMode: true,
      btnLöschenIsDisabled: true,
      btnÄndernIsDisabled: true,
      modusNeuePerson: false,
    });
  };

  deletePerson = async () => {
    const { selectedPerson } = this.state;
    if (selectedPerson && selectedPerson.id !== undefined) {
      // Check if id is defined
      try {
        await dbDeletePerson(selectedPerson.id);
        // Remove the deleted Person from the state's data array
        this.setState((prevState) => ({
          data: prevState.data.filter(
            (person) => person.id !== selectedPerson.id
          ),
          selectedPerson: null,
          btnLöschenIsDisabled: true,
          btnÄndernIsDisabled: true,
        }));
      } catch (error) {
        // Handle error
        console.error("Error deleting person:", error);
      }
    }
  };

  btnStartMenue = () => {
    navigateToStartMenu();
  };

  handleRowSelect = (event: { data: Person }) => {
    this.setState(
      {
        btnLöschenIsDisabled: false,
        btnÄndernIsDisabled: false,
        personFormEditMode: false,
        selectedPerson: event.data,
      },
      () => {
        //
      }
    );
  };

  render() {
    const { data, selectedPerson } = this.state;
    const { loading, error } = this.state;
    const personAnz = data.length;

    return (
      <div>
        <MenueHeader headerText={`${personAnz} Personen`} />
        {renderLoadingOrError({ loading, error })}

        <PersonTable
          data={data}
          selectedPerson={selectedPerson}
          handleRowSelect={this.handleRowSelect}
        />

        <br />
        <div>
          {this.state.personFormEditMode ? (
            <PersonEditForm
              onSpeichern={this.btnSpeichern}
              onAbbruch={this.btnAbbruch}
              person={selectedPerson || undefined}
            />
          ) : (
            <PersonFormView
              onNeuePerson={this.btnNeuePerson}
              btnNeuePerson={this.btnNeuePersonIsDisabled}
              onÄndernPerson={this.editPerson}
              btnÄndernPerson={this.btnÄndernIsDisabled}
              onDeletePerson={this.deletePerson}
              btnLöschenPerson={this.btnLöschenIsDisabled}
              onStartMenue={this.btnStartMenue}
              selectedPerson={selectedPerson}
            />
          )}
        </div>
      </div>
    );
  }
}

export default Personen;
import React from "react";
import { DataTable, DataTableSelectParams } from "primereact/datatable";
import { Column } from "primereact/column";
import { Person } from "../interfaces/Person"; // Import the Person interface

interface PersonTableProps {
  data: Person[];
  selectedPerson: Person | null; // Use `null` as initial selection value
  handleRowSelect: (e: DataTableSelectParams) => void;
}

export const PersonTable: React.FC<PersonTableProps> = ({
  data,
  selectedPerson,
  handleRowSelect,
}) => {
  return (
    <div className="card border-solid m-auto w-11">
      <DataTable
        value={data}
        size="small"
        selectionMode="single"
        selection={selectedPerson}
        sortField="vorname"
        sortOrder={1}
        scrollable
        scrollHeight="35vh"
        onRowSelect={handleRowSelect}>
        <Column
          field="vorname"
          header="Vorname"
          style={{
            minWidth: "100px",
          }}
          sortable></Column>
        <Column
          field="name"
          header="Nachname"
          style={{
            minWidth: "200px",
          }}
          sortable></Column>
        <Column
          field="strasse"
          header="Straße"
          style={{
            minWidth: "100px",
          }}></Column>
        <Column
          field="plz"
          header="PLZ"
          style={{
            minWidth: "80px",
          }}
          sortable></Column>
        <Column
          field="ort"
          header="Ort"
          style={{
            minWidth: "100px",
          }}
          sortable></Column>
      </DataTable>
    </div>
  );
};
import React, { useState, useCallback, useRef } from "react";
import { Toast } from "primereact/toast";
import { FormFeld } from "../../services/FormFeld";
import { buttonNeuePerson } from "./BtnNeuePerson"; // Assuming you have a similar button component for new persons
import { Person } from "../interfaces/Person"; // Import the Person interface

interface PersonFormViewProps {
  onNeuePerson: () => void;
  btnNeuePerson: boolean;
  onÄndernPerson: () => void;
  btnÄndernPerson: boolean;
  onDeletePerson: () => void;
  btnLöschenPerson: boolean;
  onStartMenue: () => void;
  selectedPerson: Person | null; // Use the Person interface here
}

export const PersonFormView: React.FC<PersonFormViewProps> = ({
  onNeuePerson,
  btnNeuePerson,
  onÄndernPerson,
  btnÄndernPerson,
  onDeletePerson,
  btnLöschenPerson,
  onStartMenue,
  selectedPerson,
}) => {
  const toast = useRef<Toast>(null);
  const [visible, setVisible] = useState(false);

  const accept = useCallback(() => {
    if (selectedPerson) {
      const message = selectedPerson.name + " wurde gelöscht!";
      onDeletePerson();
      if (toast.current) {
        toast.current.show({
          severity: "info",
          summary: "Bestätigung",
          detail: message,
          life: 3000,
        });
      }
    }
  }, [selectedPerson, onDeletePerson]);

  const reject = useCallback(() => {
    if (selectedPerson) {
      const message = selectedPerson.name + " wurde nicht gelöscht!";
      if (toast.current) {
        toast.current.show({
          severity: "warn",
          summary: "Abbruch",
          detail: message,
          life: 3000,
        });
      }
    }
  }, [selectedPerson]);

  const placeholderFunction = (): boolean => {
    return false;
  };

  btnÄndernPerson = !selectedPerson; // true if selectedPerson is not null, false otherwise
  btnLöschenPerson = !selectedPerson;

  return (
    <>
      <Toast ref={toast} />
      <div className="grid m-auto w-11">
        {selectedPerson && (
          <>
            {FormFeld(selectedPerson.name, "Name", true, placeholderFunction)}
            {FormFeld(selectedPerson.vorname, "Vorname", true, placeholderFunction)}
            {FormFeld(selectedPerson.strasse, "Strasse", true, placeholderFunction)}
            {FormFeld(selectedPerson.plz, "PLZ", true, placeholderFunction)}
            {FormFeld(selectedPerson.ort, "Ort", true, placeholderFunction)}
            {FormFeld(selectedPerson.telefon, "Telefon", true, placeholderFunction)}
            {FormFeld(selectedPerson.bankName, "Bank", true, placeholderFunction)}
            {FormFeld(selectedPerson.iban, "IBAN", true, placeholderFunction)}
            {FormFeld(selectedPerson.bic, "BIC", true, placeholderFunction)}
          </>
        )}
      </div>
      {buttonNeuePerson({
        onNeuePerson,
        btnNeuePerson,
        visible,
        setVisible,
        selectedPerson,
        accept,
        reject,
        onÄndernPerson,
        btnÄndernPerson,
        btnLöschenPerson,
        onStartMenue,
      })}
    </>
  );
};
import React from "react";

const Mitglieder = () => {
  return (
    <div className="border-solid m-auto w-11">
      <h1>Mitglieder</h1>
    </div>
  );
};

export default Mitglieder;
import React from "react";

const Veranstaltungen = () => {
    return (

        <div className="border-solid m-auto w-11">
            <h1>Veranstaltungen</h1>
        </div>
    )
}

export default Veranstaltungen;import React from "react";

const Abrechnung = () => {
  return (
    <div className="border-solid m-auto w-11">
      <h1>Abrechnung</h1>
    </div>
  );
};

export default Abrechnung;
import React, { useState, useCallback, useRef } from "react";
import { Toast } from "primereact/toast";
import { FormFeld } from "../../services/FormFeld";
import { buttonNeuerVerein } from "./BtnNeuerVerein";
import { Verein } from "../interfaces/Verein";

interface VereinFormViewProps {
  onNeuerVerein: () => void;
  btnNeuerVerein: boolean;
  onÄndernVerein: () => void;
  btnÄndernVerein: boolean;
  onDeleteVerein: () => void;
  btnLöschenVerein: boolean;
  onStartMenue: () => void;
  selectedVerein: Verein | null;
}

export const VereinFormView: React.FC<VereinFormViewProps> = ({
  onNeuerVerein,
  btnNeuerVerein,
  onÄndernVerein,
  btnÄndernVerein,
  onDeleteVerein,
  btnLöschenVerein,
  onStartMenue,
  selectedVerein,
}) => {
  const toast = useRef<Toast>(null);
  const [visible, setVisible] = useState(false);

  const accept = useCallback(() => {
    if (selectedVerein) {
      const message = selectedVerein.name + " wurde gelöscht!";
      onDeleteVerein();
      if (toast.current) {
        toast.current.show({
          severity: "info",
          summary: "Bestätigung",
          detail: message,
          life: 3000,
        });
      }
    }
  }, [selectedVerein, onDeleteVerein]);

  const reject = useCallback(() => {
    if (selectedVerein) {
      const message = selectedVerein.name + " wurde nicht gelöscht!";
      if (toast.current) {
        toast.current.show({
          severity: "warn",
          summary: "Abbruch",
          detail: message,
          life: 3000,
        });
      }
    }
  }, [selectedVerein]);

  const placeholderFunction = (): boolean => {
    return false;
  };

  btnÄndernVerein = !selectedVerein; // true if selectedVerein is not null, false otherwise
  btnLöschenVerein = !selectedVerein;

  return (
    <>
      <Toast ref={toast} />
      <div className="grid m-auto w-11">
        {selectedVerein && (
          <>
            {FormFeld(
              selectedVerein.abk,
              "Kurzname",
              true,
              placeholderFunction
            )}
            {FormFeld(selectedVerein.name, "Verein", true, placeholderFunction)}
            {FormFeld(
              selectedVerein.strasse,
              "Strasse",
              true,
              placeholderFunction
            )}
            {FormFeld(selectedVerein.plz, "PLZ", true, placeholderFunction)}
            {FormFeld(selectedVerein.ort, "Ort", true, placeholderFunction)}
            {FormFeld(
              selectedVerein.bankName,
              "Bank",
              true,
              placeholderFunction
            )}
            {FormFeld(
              selectedVerein.kontoInhaber,
              "Kontoinhaber",
              true,
              placeholderFunction
            )}
            {FormFeld(
              selectedVerein.kiAnschrift,
              "Anschrift",
              true,
              placeholderFunction
            )}
            {FormFeld(selectedVerein.iban, "IBAN", true, placeholderFunction)}
            {FormFeld(selectedVerein.bic, "BIC", true, placeholderFunction)}
          </>
        )}
      </div>
      {buttonNeuerVerein({
        onNeuerVerein,
        btnNeuerVerein,
        visible,
        setVisible,
        selectedVerein,
        accept,
        reject,
        onÄndernVerein,
        btnÄndernVerein,
        btnLöschenVerein,
        onStartMenue,
      })}
    </>
  );
};
import React, { Component } from "react";
import { MenueHeader } from "../MenueHeader";
import { VereinTable } from "./VereinTable";
import { VereinFormView } from "./VereinFormView";
import { Verein } from "../interfaces/Verein";
import { renderLoadingOrError } from "../../services/loadingOnErrorUtils";
import { navigateToStartMenu } from "../../services/navigateToStartMenue"; 

import {
  getAllVereine as dbGetAllVereine,
  deleteVerein as dbDeleteVerein,
  createVerein as dbCreateVerein,
  replaceVerein as dbReplaceVerein,
} from "../../services/vereine";
import { VereinEditForm } from "./VereinEditForm";
import { MessageSavingEmptyVerein } from "../../services/MessageSavingEmptyVerein";

interface VereineProps {}

interface VereineState {
  data: Verein[];
  selectedVerein: Verein | null;
  loading: boolean;
  error: null | string;
  vereinFormEditMode: boolean;
  modusNeuerVerein: boolean;
  btnLöschenIsDisabled: boolean;
  btnÄndernIsDisabled: boolean;
  btnNeuerVereinIsDisabled: boolean;
  //setModusNeuerVerein: boolean;
}

class Vereine extends Component<VereineProps, VereineState> {
  state: VereineState = {
    data: [],
    selectedVerein: null,
    loading: true,
    error: null,
    vereinFormEditMode: false,
    modusNeuerVerein: true,
    btnLöschenIsDisabled: true,
    btnÄndernIsDisabled: true,
    btnNeuerVereinIsDisabled: false,
    // setModusNeuerVerein: false,
    // setBtnLöschenIsDisabled: false,
    // setBtnÄndernIsDisabled: false,
    // setBtnNeuerVereinIsDisabled: true,
    // setVereinFormEditMode: false,
  };
  btnNeuerVereinIsDisabled: boolean = false;
  btnÄndernIsDisabled: boolean = false;
  btnLöschenIsDisabled: boolean = false;

  componentDidMount() {
    this.fetchVereineData();
  }

  fetchVereineData = async () => {
    try {
      const vereine = await dbGetAllVereine();
      this.setState({
        data: vereine,
        loading: false,
        error: null,
      });
    } catch (error) {
      this.setState({
        data: [],
        loading: false,
        error: "An error occurred while fetching data.",
      });
    }
  };

  btnAbbruch = () => {
    this.setState({
      btnLöschenIsDisabled: true,
      vereinFormEditMode: false,
      selectedVerein: null,
    });
  };

  btnSpeichern = async (verein: Verein) => {
    this.setState({
      btnLöschenIsDisabled: true,
      btnÄndernIsDisabled: true,
    });

    const { modusNeuerVerein, selectedVerein } = this.state;

    try {
      // Perform validation check here
      if (
        (modusNeuerVerein &&
          verein.name.trim() !== "" &&
          verein.abk.trim() !== "") ||
        (!modusNeuerVerein && selectedVerein)
      ) {
        if (modusNeuerVerein) {
          await dbCreateVerein(verein);
        } else if (selectedVerein) {
            verein.id = selectedVerein.id;
            await dbReplaceVerein(verein);
          } else {
            throw new Error("No selected Verein found.");
          }

        this.fetchVereineData();

        if (!modusNeuerVerein && selectedVerein) {
          this.setState({
            selectedVerein: {
              ...selectedVerein,
              ...verein,
            },
          });
        }

        this.setState({
          vereinFormEditMode: false,
        });
      } else {
        MessageSavingEmptyVerein();
      }
    } catch (error) {
      console.error("Error saving verein:", error);
    }
  };

  btnNeuerVerein = () => {
    // erzeuge einen neuen leeren Verein

    const newVerein = {
      name: "",
      abk: "",
      strasse: "",
      plz: "",
      ort: "",
      telefon: "",
      bankName: "",
      kontoInhaber: "",
      kiAnschrift: "",
      iban: "",
      bic: "",
    };

    this.setState({
      modusNeuerVerein: true,
      btnLöschenIsDisabled: true,
      btnÄndernIsDisabled: true,
      btnNeuerVereinIsDisabled: false,
      vereinFormEditMode: true,
      selectedVerein: newVerein,
    });
  };

  handleRowSelect = (event: { data: Verein }) => {
    this.setState(
      {
        btnLöschenIsDisabled: false,
        btnÄndernIsDisabled: false,
        vereinFormEditMode: false,
        selectedVerein: event.data,
      },
      () => {
        //
      }
    );
  };

  editVerein = () => {
    this.setState({
      vereinFormEditMode: true,
      btnLöschenIsDisabled: true,
      btnÄndernIsDisabled: true,
      modusNeuerVerein: false,
    });
  };

  deleteVerein = async () => {
    const { selectedVerein } = this.state;
    if (selectedVerein && selectedVerein.id !== undefined) {
      // Check if id is defined
      try {
        await dbDeleteVerein(selectedVerein.id);
        // Remove the deleted Verein from the state's data array
        this.setState((prevState) => ({
          data: prevState.data.filter(
            (verein) => verein.id !== selectedVerein.id
          ),
          selectedVerein: null,
          btnLöschenIsDisabled: true,
          btnÄndernIsDisabled: true,
        }));
      } catch (error) {
        // Handle error
        console.error("Error deleting verein:", error);
      }
    }
  };

  btnStartMenue = () => {
    navigateToStartMenu();
  };

  render() {
    const { data, selectedVerein } = this.state;
    const { loading, error } = this.state;
    const vereinAnz = data.length;

    return (
      <div>
        <MenueHeader headerText={`${vereinAnz} Vereine`} />
        {renderLoadingOrError({ loading, error })}

        <VereinTable
          data={data}
          selectedVerein={selectedVerein}
          handleRowSelect={this.handleRowSelect}
        />

        <br />
        <div>
          {this.state.vereinFormEditMode ? (
            <VereinEditForm
              onSpeichern={this.btnSpeichern}
              onAbbruch={this.btnAbbruch}
              verein={selectedVerein || undefined}
            />
          ) : (
            <VereinFormView
              onNeuerVerein={this.btnNeuerVerein}
              btnNeuerVerein={this.btnNeuerVereinIsDisabled}
              onÄndernVerein={this.editVerein}
              btnÄndernVerein={this.btnÄndernIsDisabled}
              onDeleteVerein={this.deleteVerein}
              btnLöschenVerein={this.btnLöschenIsDisabled}
              onStartMenue={this.btnStartMenue}
              selectedVerein={selectedVerein}
            />
          )}
        </div>
      </div>
    );
  }
}

export default Vereine;
import React from "react";
import { DataTable, DataTableSelectParams } from "primereact/datatable";
import { Column } from "primereact/column";
import { Verein } from "../interfaces/Verein";

interface VereinTableProps {
  data: Verein[];
  selectedVerein: Verein | null; // Use `null` as initial selection value
  handleRowSelect: (e: DataTableSelectParams) => void;
}

export const VereinTable: React.FC<VereinTableProps> = ({
  data,
  selectedVerein,
  handleRowSelect,
}) => {
  return (
    <div className="card border-solid m-auto w-11">
      <DataTable
        value={data}
        size="small"
        selectionMode="single"
        selection={selectedVerein}
        sortField="abk"
        sortOrder={1}
        scrollable
        scrollHeight="35vh"
        onRowSelect={handleRowSelect}>
        {/* ... Columns ... */}
        <Column
          field="abk"
          header="Abk."
          style={{
            minWidth: "30px",
          }}
          sortable></Column>
        <Column
          field="name"
          header="Verein"
          style={{
            minWidth: "200px",
          }}
          sortable></Column>
        <Column
          field="strasse"
          header="Strasse"
          style={{
            minWidth: "100px",
          }}></Column>
        <Column
          field="ort"
          header="Ort"
          style={{
            minWidth: "100px",
          }}
          sortable></Column>
      </DataTable>
    </div>
  );
};
import React, { ReactNode } from "react";
import { BtnEditDeleteBack } from "../../services/BtnEditDeleteBack";
import { Button } from "primereact/button";
import { ConfirmDialog } from "primereact/confirmdialog";
import { Verein } from "../interfaces/Verein";

interface ButtonNeuerVereinProps {
  onNeuerVerein: () => void;
  btnNeuerVerein: boolean;
  visible: boolean;
  setVisible: React.Dispatch<React.SetStateAction<boolean>>;
  selectedVerein: Verein | null;
  accept: () => void;
  reject: () => void;
  onÄndernVerein: () => void;
  btnÄndernVerein: boolean;
  btnLöschenVerein: boolean;
  onStartMenue: () => void;
}

export function buttonNeuerVerein({
  onNeuerVerein,
  btnNeuerVerein,
  visible,
  setVisible,
  selectedVerein,
  accept,
  reject,
  onÄndernVerein,
  btnÄndernVerein,
  btnLöschenVerein,
  onStartMenue,
}: ButtonNeuerVereinProps): ReactNode {
  return (
    <div>
      <Button
        label="Neuer Verein"
        className="p-button-outlined m-2"
        onClick={onNeuerVerein}
        disabled={btnNeuerVerein}
      />
      <ConfirmDialog
        visible={visible}
        onHide={() => setVisible(false)}
        message={
          selectedVerein
            ? "Soll der " + selectedVerein.name + " gelöscht werden?"
            : ""
        }
        header={
          selectedVerein ? "Löschen des " + selectedVerein.name + "?" : ""
        }
        icon="pi pi-exclamation-triangle"
        accept={accept}
        reject={reject}
      />
      <BtnEditDeleteBack
        onÄndern={onÄndernVerein}
        btnÄndern={btnÄndernVerein}
        setVisible={setVisible}
        btnLöschen={btnLöschenVerein}
        onStartMenue={onStartMenue}
      />
    </div>
  );
}
import React, { useState, useRef, useCallback, useEffect } from "react";
import { Toast } from "primereact/toast";
import { BtnStoreCancel } from "../../services/BtnStoreCancel";
import { FormFeld } from "../../services/FormFeld";
import { Verein } from "../interfaces/Verein";

interface VereinEditFormProps {
  onSpeichern: (verein: Verein) => void;
  onAbbruch: () => void;
  verein?: Verein;
}

export function VereinEditForm({
  onSpeichern,
  onAbbruch,
  verein,
}: Readonly<VereinEditFormProps>) {
  const [name, setVereinsName] = useState("");
  const [abk, setVereinsKurz] = useState("");
  const [strasse, setVereinsStrasse] = useState("");
  const [plz, setVereinsPLZ] = useState("");
  const [ort, setVereinsOrt] = useState("");
  const [telefon, setVereinsTelefon] = useState("");
  const [bankName, setVereinsBankName] = useState("");
  const [kontoInhaber, setVereinsKontoInhaber] = useState("");
  const [kiAnschrift, setVereinsKIAnschrift] = useState("");
  const [iban, setVereinsIBAN] = useState("");
  const [bic, setVereinsBIC] = useState("");
  const toast = useRef<Toast | null>(null);

  console.log(verein);

  const createUpdateVerein = useCallback(() => {
    // If verein exists, it´s an update, so include the "id" property
    if (verein) {
      const updatedVerein: Verein = {
        id: verein.id, // Include the id
        name,
        abk,
        strasse,
        plz,
        ort,
        telefon,
        bankName,
        kontoInhaber,
        kiAnschrift,
        iban,
        bic,
      };
      onSpeichern(updatedVerein);
    } else {
      // If verein doesn't exist, it's a new entry, you might handle this case differently
      // For example, create a new instance or show an error//
    }
  }, [
    name,
    abk,
    strasse,
    plz,
    ort,
    telefon,
    bankName,
    kontoInhaber,
    kiAnschrift,
    iban,
    bic,
    onSpeichern,
  ]);

  useEffect(() => {
    if (verein) {
      setVereinsName(verein.name);
      setVereinsKurz(verein.abk);
      setVereinsStrasse(verein.strasse);
      setVereinsPLZ(verein.plz);
      setVereinsOrt(verein.ort);
      setVereinsTelefon(verein.telefon);
      setVereinsBankName(verein.bankName);
      setVereinsKontoInhaber(verein.kontoInhaber);
      setVereinsKIAnschrift(verein.kiAnschrift);
      setVereinsIBAN(verein.iban);
      setVereinsBIC(verein.bic);
    }
  }, [verein]);

  const handleCreateUpdateVerein = () => {
    createUpdateVerein();
    return false; // Placeholder value indicating that the update was not successful
  };

  return (
    <>
      <Toast ref={toast} />
      <div className="grid m-auto w-11">
        {FormFeld(abk, "Abkürzung", false, setVereinsKurz)}
        {FormFeld(name, "Vereinsname", false, setVereinsName)}
        {FormFeld(strasse, "Strasse", false, setVereinsStrasse)}
        {FormFeld(plz, "PLZ", false, setVereinsPLZ)}
        {FormFeld(ort, "Ort", false, setVereinsOrt)}
        {FormFeld(telefon, "Telefon", false, setVereinsTelefon)}
        {FormFeld(bankName, "Bank", false, setVereinsBankName)}
        {FormFeld(kontoInhaber, "Konto-Inhaber", false, setVereinsKontoInhaber)}
        {FormFeld(kiAnschrift, "Anschrift", false, setVereinsKIAnschrift)}
        {FormFeld(iban, "IBAN", false, setVereinsIBAN)}
        {FormFeld(bic, "BIC", false, setVereinsBIC)}
      </div>
      <BtnStoreCancel
        createUpdate={handleCreateUpdateVerein}
        onAbbruch={onAbbruch}
      />
    </>
  );
}
import React from "react";

const Reisekosten = () => {
    return (

        <div className="border-solid m-auto w-11">
            <h1>Reisekosten</h1>
        </div>
    )
}

export default Reisekosten;import React from "react";

const Teilnehmerliste = () => {
    return (

        <div className="border-solid m-auto w-11">
            <h1>Teilnehmerliste</h1>
        </div>



    )
}

export default Teilnehmerliste;import React from "react";

const Erhebungsbogen = () => {
    return (

        <div className="border-solid m-auto w-11">
            <h1>Erhebungsbogen</h1>
        </div>



    )
}

export default Erhebungsbogen;import React from "react";

const AusgabeReisekosten = () => {
    return (

        <div className="border-solid m-auto w-11">
            <h1>AusgabeReisekosten</h1>
        </div>

    )
}

export default AusgabeReisekosten;export interface Person {
  id?: number;
  name: string;
  vorname: string;
  strasse: string;
  plz: string;
  ort: string;
  telefon: string;
  bankName: string;
  iban: string;
  bic: string;
}

export default Person;
export interface VereinDTO {
  id?: number; // Optional because it may not exist for new objects
  name: string;
  abk: string;
  strasse?: string;
  plz?: string;
  ort?: string;
  telefon?: string;
  bankName?: string;
  kontoInhaber?: string;
  kiAnschrift?: string;
  iban?: string;
  bic?: string;
}// navigationUtils.ts

export const navigateToStartMenu = () => {
    // Perform any necessary checks here before navigating
    window.location.href = "/startmenue";
  };
  export const MessageSavingEmptyVerein = () => {
  console.log("2. leerer Verein");
};
import React from "react";
import { Button } from "primereact/button";

interface BtnStoreCancelProps {
  createUpdate: () => boolean; 
  onAbbruch: () => void;
}

export function BtnStoreCancel({ createUpdate, onAbbruch }: Readonly<BtnStoreCancelProps>) {
  return (
    <>
      <Button
        label="Speichern"
        className="p-button-outlined p-button-success m-2"
        onClick={createUpdate}
      />
      <Button
        label="Abbruch"
        className="p-button-outlined m-2 ml-6"
        onClick={onAbbruch}
      />
    </>
  );
}
import React from "react";
import { Dropdown, DropdownChangeParams } from "primereact/dropdown";

interface Item {
  name: string;
  code: string;
}

interface Props {
  label: string;
  labelPlaceholder: string;
  selectedItem: Item | null;
  items: Item[];
  setSelectedItem: (item: Item | null) => boolean;
}

export function BtnDropDown({
  label,
  labelPlaceholder,
  selectedItem,
  items,
  setSelectedItem,
}: Props) {
  const handleChange = (e: DropdownChangeParams) => {
    setSelectedItem(e.value as Item | null);
  };

  return (
    <div className=" col-fixed">
      <div className="p-0">
        <span className="p-float-label">
          <Dropdown
            optionLabel="name"
            optionValue="code"
            value={selectedItem}
            options={items}
            onChange={handleChange}
            placeholder={labelPlaceholder}
          />
          <label htmlFor="in">{label}</label>
        </span>
      </div>
    </div>
  );
}
import axios from "axios";
import { Person } from "../components/interfaces/Person";

const baseURL = "http://localhost:8080/person"; 

const getCollectionURL = () => baseURL;

const getElementURL = (personId: number) =>
  `${getCollectionURL()}/${encodeURIComponent(personId)}`;

export const getAllPersonen = async () => {
  try {
    const response = await axios.get(getCollectionURL());
    console.log("getAllPersonen:", getCollectionURL())
    const personen = response.data;
    return personen;
  } catch (error) {
    throw error;
  }
};

export const createPerson = async (person: Person) => {
  try {
    const response = await axios.post(getCollectionURL(), person, {
      headers: { "Content-Type": "application/json" },
    });
    return response.data;
  } catch (error) {
    throw error;
  }
};

export const replacePerson = async (person: Person) => {
  try {
    if (person.id === undefined) {
      throw new Error("Person ID is missing for replacement.");
    }

    const response = await axios.put(getElementURL(person.id), person, {
      headers: { "Content-Type": "application/json" },
    });
    return response.data;
  } catch (error) {
    throw error;
  }
};

export const deletePerson = async (personId: number) => {
  try {
    await axios.delete(getElementURL(personId));
  } catch (error) {
    throw error;
  }
};
import axios from "axios";
import { Verein } from "../components/interfaces/Verein";

const baseURL = "http://localhost:8080/verein";

const getCollectionURL = () => baseURL;

const getElementURL = (vereinId: number ) =>
  `${getCollectionURL()}/${encodeURIComponent(vereinId)}`;

export const getAllVereine = async () => {
  try {
    const response = await axios.get(getCollectionURL());
    const vereine = response.data;
    
    return vereine;
  } catch (error) {
    // log and rethrow 
    console.log(error);
    throw error;
  }
};

export const createVerein = async (verein: Verein) => {
  try {
    const response = await axios.post(getCollectionURL(), verein, {
      headers: { "Content-Type": "application/json" },
    });
    return response.data;
  } catch (error) {
    // log and rethrow 
    console.log(error);
    throw error;
  }
};

export const replaceVerein = async (verein: Verein) => {
  try {
    if (verein.id === undefined) {
      throw new Error("Verein ID is missing for replacement.");
    }
    
    const response = await axios.put(getElementURL(verein.id), verein, {
      headers: { "Content-Type": "application/json" },
    });
    return response.data;
  } catch (error) {
    // log and rethrow 
    console.log(error);
    throw error;
  }
};


export const deleteVerein = async (vereinId: number) => {
  try {
    await axios.delete(getElementURL(vereinId));
  } catch (error) {
    // log and rethrow 
    console.log(error);
    throw error;
  }
};
import React from "react";
import { InputText } from "primereact/inputtext";

export function FormFeld(
  feldName: string,
  label: string,
  feldDisabled: boolean,
  setFunction: (value: string) => void
) {
  return (
    <div className=" col-fixed">
      <div className="p-0">
        <span className="p-float-label">
          <InputText
            id={feldName}
            value={feldName}
            disabled={feldDisabled}
            onChange={(e) => setFunction(e.target.value)}
          />
          <label htmlFor="in">{label}</label>
        </span>
      </div>
    </div>
  );
}
import React from "react";

interface LoadingOrErrorProps {
  loading: boolean;
  error: string | null;
}
// loadingOrErrorUtils.js
export const renderLoadingOrError = ({
  loading,
  error,
}: LoadingOrErrorProps) => {
  if (loading) {
    return <div>Loading...</div>;
  }
  if (error) {
    return <div>Error: {error}</div>;
  }
  return null;
};
import React from "react";
import { Button } from "primereact/button";

interface BtnEditDeleteBackProps {
  onÄndern: () => void;
  btnÄndern: boolean;
  setVisible: React.Dispatch<React.SetStateAction<boolean>>;
  btnLöschen: boolean;
  onStartMenue: () => void;
}

export function BtnEditDeleteBack({
  onÄndern,
  btnÄndern,
  setVisible,
  btnLöschen,
  onStartMenue,
}: BtnEditDeleteBackProps) {
  return (
    <>
      <Button
        label="Ändern"
        className="p-button-outlined p-button-warning m-2"
        onClick={onÄndern}
        disabled={btnÄndern}
      />
      <Button
        onClick={() => setVisible(true)}
        className="p-button-outlined p-button-danger m-2"
        label="Löschen"
        disabled={btnLöschen}
      />
      <Button
        label="Zurück"
        className="p-button-outlined m-2"
        onClick={onStartMenue}
      />
    </>
  );
}
