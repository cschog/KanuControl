{"ast":null,"code":"import * as React from 'react';\nimport PrimeReact from 'primereact/api';\nimport { useEventListener, useMountEffect, useUpdateEffect, useUnmountEffect } from 'primereact/hooks';\nimport { classNames, IconUtils, ObjectUtils, DomHandler, ZIndexUtils } from 'primereact/utils';\nimport { Ripple } from 'primereact/ripple';\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = null == arr ? null : \"undefined\" != typeof Symbol && arr[Symbol.iterator] || arr[\"@@iterator\"];\n  if (null != _i) {\n    var _s,\n      _e,\n      _x,\n      _r,\n      _arr = [],\n      _n = !0,\n      _d = !1;\n    try {\n      if (_x = (_i = _i.call(arr)).next, 0 === i) {\n        if (Object(_i) !== _i) return;\n        _n = !1;\n      } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0) {\n        ;\n      }\n    } catch (err) {\n      _d = !0, _e = err;\n    } finally {\n      try {\n        if (!_n && null != _i[\"return\"] && (_r = _i[\"return\"](), Object(_r) !== _r)) return;\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n    return _arr;\n  }\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n  return arr2;\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nvar MenubarSub = /*#__PURE__*/React.memo( /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _React$useState = React.useState(null),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    activeItemState = _React$useState2[0],\n    setActiveItemState = _React$useState2[1];\n  var _useEventListener = useEventListener({\n      type: 'click',\n      listener: function listener(event) {\n        if (ref && ref.current && !ref.current.contains(event.target)) {\n          setActiveItemState(null);\n        }\n      }\n    }),\n    _useEventListener2 = _slicedToArray(_useEventListener, 1),\n    bindDocumentClickListener = _useEventListener2[0];\n  var onItemMouseEnter = function onItemMouseEnter(event, item) {\n    if (item.disabled || props.mobileActive) {\n      event.preventDefault();\n      return;\n    }\n    if (props.root) {\n      if (activeItemState || props.popup) {\n        setActiveItemState(item);\n      }\n    } else {\n      setActiveItemState(item);\n    }\n  };\n  var onItemClick = function onItemClick(event, item) {\n    if (item.disabled) {\n      event.preventDefault();\n      return;\n    }\n    if (!item.url) {\n      event.preventDefault();\n    }\n    if (item.command) {\n      item.command({\n        originalEvent: event,\n        item: item\n      });\n    }\n    if (item.items) activeItemState && item === activeItemState ? setActiveItemState(null) : setActiveItemState(item);else onLeafClick();\n  };\n  var onItemKeyDown = function onItemKeyDown(event, item) {\n    var listItem = event.currentTarget.parentElement;\n    switch (event.which) {\n      //down\n      case 40:\n        if (props.root) item.items && expandSubmenu(item, listItem);else navigateToNextItem(listItem);\n        event.preventDefault();\n        break;\n\n      //up\n      case 38:\n        !props.root && navigateToPrevItem(listItem);\n        event.preventDefault();\n        break;\n\n      //right\n      case 39:\n        if (props.root) {\n          var nextItem = findNextItem(listItem);\n          nextItem && nextItem.children[0].focus();\n        } else {\n          item.items && expandSubmenu(item, listItem);\n        }\n        event.preventDefault();\n        break;\n\n      //left\n      case 37:\n        props.root && navigateToPrevItem(listItem);\n        event.preventDefault();\n        break;\n    }\n    props.onKeyDown && props.onKeyDown(event, listItem);\n  };\n  var onChildItemKeyDown = function onChildItemKeyDown(event, childListItem) {\n    if (props.root) {\n      //up\n      if (event.which === 38 && childListItem.previousElementSibling == null) {\n        collapseMenu(childListItem);\n      }\n    } else {\n      //left\n      if (event.which === 37) {\n        collapseMenu(childListItem);\n      }\n    }\n  };\n  var expandSubmenu = function expandSubmenu(item, listItem) {\n    setActiveItemState(item);\n    setTimeout(function () {\n      listItem.children[1].children[0].children[0].focus();\n    }, 50);\n  };\n  var collapseMenu = function collapseMenu(listItem) {\n    setActiveItemState(null);\n    listItem.parentElement.previousElementSibling.focus();\n  };\n  var navigateToNextItem = function navigateToNextItem(listItem) {\n    var nextItem = findNextItem(listItem);\n    nextItem && nextItem.children[0].focus();\n  };\n  var navigateToPrevItem = function navigateToPrevItem(listItem) {\n    var prevItem = findPrevItem(listItem);\n    prevItem && prevItem.children[0].focus();\n  };\n  var findNextItem = function findNextItem(item) {\n    var nextItem = item.nextElementSibling;\n    return nextItem ? DomHandler.hasClass(nextItem, 'p-disabled') || !DomHandler.hasClass(nextItem, 'p-menuitem') ? findNextItem(nextItem) : nextItem : null;\n  };\n  var findPrevItem = function findPrevItem(item) {\n    var prevItem = item.previousElementSibling;\n    return prevItem ? DomHandler.hasClass(prevItem, 'p-disabled') || !DomHandler.hasClass(prevItem, 'p-menuitem') ? findPrevItem(prevItem) : prevItem : null;\n  };\n  var onLeafClick = function onLeafClick() {\n    setActiveItemState(null);\n    props.onLeafClick && props.onLeafClick();\n  };\n  useMountEffect(function () {\n    bindDocumentClickListener();\n  });\n  useUpdateEffect(function () {\n    !props.parentActive && setActiveItemState(null);\n  }, [props.parentActive]);\n  var createSeparator = function createSeparator(index) {\n    var key = 'separator_' + index;\n    return /*#__PURE__*/React.createElement(\"li\", {\n      key: key,\n      className: \"p-menu-separator\",\n      role: \"separator\"\n    });\n  };\n  var createSubmenu = function createSubmenu(item) {\n    if (item.items) {\n      return /*#__PURE__*/React.createElement(MenubarSub, {\n        menuProps: props.menuProps,\n        model: item.items,\n        mobileActive: props.mobileActive,\n        onLeafClick: onLeafClick,\n        onKeyDown: onChildItemKeyDown,\n        parentActive: item === activeItemState\n      });\n    }\n    return null;\n  };\n  var createMenuitem = function createMenuitem(item, index) {\n    if (item.visible === false) {\n      return null;\n    }\n    var key = item.label + '_' + index;\n    var className = classNames('p-menuitem', {\n      'p-menuitem-active': activeItemState === item\n    }, item.className);\n    var linkClassName = classNames('p-menuitem-link', {\n      'p-disabled': item.disabled\n    });\n    var iconClassName = classNames('p-menuitem-icon', item.icon);\n    var submenuIconClassName = classNames('p-submenu-icon pi', {\n      'pi-angle-down': props.root,\n      'pi-angle-right': !props.root\n    });\n    var icon = IconUtils.getJSXIcon(item.icon, {\n      className: 'p-menuitem-icon'\n    }, {\n      props: props.menuProps\n    });\n    var label = item.label && /*#__PURE__*/React.createElement(\"span\", {\n      className: \"p-menuitem-text\"\n    }, item.label);\n    var submenuIcon = item.items && /*#__PURE__*/React.createElement(\"span\", {\n      className: submenuIconClassName\n    });\n    var submenu = createSubmenu(item);\n    var content = /*#__PURE__*/React.createElement(\"a\", {\n      href: item.url || '#',\n      role: \"menuitem\",\n      className: linkClassName,\n      target: item.target,\n      \"aria-haspopup\": item.items != null,\n      onClick: function onClick(event) {\n        return onItemClick(event, item);\n      },\n      onKeyDown: function onKeyDown(event) {\n        return onItemKeyDown(event, item);\n      }\n    }, icon, label, submenuIcon, /*#__PURE__*/React.createElement(Ripple, null));\n    if (item.template) {\n      var defaultContentOptions = {\n        onClick: function onClick(event) {\n          return onItemClick(event, item);\n        },\n        onKeyDown: function onKeyDown(event) {\n          return onItemKeyDown(event, item);\n        },\n        className: linkClassName,\n        labelClassName: 'p-menuitem-text',\n        iconClassName: iconClassName,\n        submenuIconClassName: submenuIconClassName,\n        element: content,\n        props: props\n      };\n      content = ObjectUtils.getJSXElement(item.template, item, defaultContentOptions);\n    }\n    return /*#__PURE__*/React.createElement(\"li\", {\n      key: key,\n      role: \"none\",\n      id: item.id,\n      className: className,\n      style: item.style,\n      onMouseEnter: function onMouseEnter(event) {\n        return onItemMouseEnter(event, item);\n      }\n    }, content, submenu);\n  };\n  var createItem = function createItem(item, index) {\n    return item.separator ? createSeparator(index) : createMenuitem(item, index);\n  };\n  var createMenu = function createMenu() {\n    return props.model ? props.model.map(createItem) : null;\n  };\n  var role = props.root ? 'menubar' : 'menu';\n  var className = classNames({\n    'p-submenu-list': !props.root,\n    'p-menubar-root-list': props.root\n  });\n  var submenu = createMenu();\n  return /*#__PURE__*/React.createElement(\"ul\", {\n    ref: ref,\n    className: className,\n    role: role\n  }, submenu);\n}));\nMenubarSub.displayName = 'MenubarSub';\nvar Menubar = /*#__PURE__*/React.memo( /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _React$useState = React.useState(false),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    mobileActiveState = _React$useState2[0],\n    setMobileActiveState = _React$useState2[1];\n  var elementRef = React.useRef(null);\n  var rootMenuRef = React.useRef(null);\n  var menuButtonRef = React.useRef(null);\n  var _useEventListener = useEventListener({\n      type: 'click',\n      listener: function listener(event) {\n        if (mobileActiveState && isOutsideClicked(event)) {\n          setMobileActiveState(false);\n        }\n      }\n    }),\n    _useEventListener2 = _slicedToArray(_useEventListener, 2),\n    bindDocumentClickListener = _useEventListener2[0],\n    unbindDocumentClickListener = _useEventListener2[1];\n  var toggle = function toggle(event) {\n    event.preventDefault();\n    setMobileActiveState(function (prevMobileActive) {\n      return !prevMobileActive;\n    });\n  };\n  var onLeafClick = function onLeafClick() {\n    setMobileActiveState(false);\n  };\n  var isOutsideClicked = function isOutsideClicked(event) {\n    return rootMenuRef.current !== event.target && !rootMenuRef.current.contains(event.target) && menuButtonRef.current !== event.target && !menuButtonRef.current.contains(event.target);\n  };\n  useUpdateEffect(function () {\n    if (mobileActiveState) {\n      ZIndexUtils.set('menu', rootMenuRef.current, PrimeReact.autoZIndex, PrimeReact.zIndex['menu']);\n      bindDocumentClickListener();\n    } else {\n      unbindDocumentClickListener();\n      ZIndexUtils.clear(rootMenuRef.current);\n    }\n  }, [mobileActiveState]);\n  useUnmountEffect(function () {\n    ZIndexUtils.clear(rootMenuRef.current);\n  });\n  React.useImperativeHandle(ref, function () {\n    return {\n      props: props,\n      toggle: toggle,\n      useCustomContent: useCustomContent,\n      getElement: function getElement() {\n        return elementRef.current;\n      },\n      getRootMenu: function getRootMenu() {\n        return rootMenuRef.current;\n      },\n      getMenuButton: function getMenuButton() {\n        return menuButtonRef.current;\n      }\n    };\n  });\n  var createStartContent = function createStartContent() {\n    if (props.start) {\n      var _start = ObjectUtils.getJSXElement(props.start, props);\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"p-menubar-start\"\n      }, _start);\n    }\n    return null;\n  };\n  var createEndContent = function createEndContent() {\n    if (props.end) {\n      var _end = ObjectUtils.getJSXElement(props.end, props);\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"p-menubar-end\"\n      }, _end);\n    }\n    return null;\n  };\n  var createMenuButton = function createMenuButton() {\n    if (props.model && props.model.length < 1) {\n      return null;\n    }\n    /* eslint-disable */\n    var button = /*#__PURE__*/React.createElement(\"a\", {\n      ref: menuButtonRef,\n      href: '#',\n      role: \"button\",\n      tabIndex: 0,\n      className: \"p-menubar-button\",\n      onClick: toggle\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      className: \"pi pi-bars\"\n    }));\n    /* eslint-enable */\n\n    return button;\n  };\n  var otherProps = ObjectUtils.findDiffKeys(props, Menubar.defaultProps);\n  var className = classNames('p-menubar p-component', {\n    'p-menubar-mobile-active': mobileActiveState\n  }, props.className);\n  var start = createStartContent();\n  var end = createEndContent();\n  var menuButton = createMenuButton();\n  var submenu = /*#__PURE__*/React.createElement(MenubarSub, {\n    ref: rootMenuRef,\n    menuProps: props,\n    model: props.model,\n    root: true,\n    mobileActive: mobileActiveState,\n    onLeafClick: onLeafClick\n  });\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    id: props.id,\n    className: className,\n    style: props.style\n  }, otherProps), start, menuButton, submenu, end);\n}));\nMenubar.displayName = 'Menubar';\nMenubar.defaultProps = {\n  __TYPE: 'Menubar',\n  id: null,\n  model: null,\n  style: null,\n  className: null,\n  start: null,\n  end: null\n};\nexport { Menubar };","map":null,"metadata":{},"sourceType":"module"}